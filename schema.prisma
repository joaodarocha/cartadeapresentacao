datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   Int           @id @default(autoincrement())
  username             String        @unique
  email                String?
  hasPaid              Boolean       @default(false)
  isUsingLn            Boolean       @default(false)
  gptModel             String        @default("gpt-4o-mini")
  datePaid             DateTime?
  stripeId             String?
  checkoutSessionId    String?
  subscriptionStatus   String?
  notifyPaymentExpires Boolean       @default(false)
  credits              Int           @default(3)
  letters              CoverLetter[]
  jobs                 Job[]
  lnData               LnData?
  lnPayments           LnPayment[]
}

model LnData {
  id        String    @id @default(uuid())
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?      @unique
  loginUrl  String?   @unique
  k1Hash    String    @unique
  token     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// type LightningInvoice = {
//   status: string;
//   successAction: {
//     tag: string;
//     message: string;
//   };
//   verify: string;
//   routes: any[]; // You can replace this with a more specific type if needed
//   pr: string;
// };

model LnPayment {
  pr        String    @id @unique
  status    String
  settled   Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  amount    Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model CoverLetter {
  id         String    @id @default(uuid())
  title      String
  content    String
  tokenUsage Int
  job        Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      String
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Job {
  id          String        @id @default(uuid())
  title       String
  company     String
  location    String
  description String
  coverLetter CoverLetter[]
  user        User?         @relation(fields: [userId], references: [id])
  userId      Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isCompleted Boolean       @default(false)
}


model SeoPage {
  id              String   @id @default(uuid())
  slug            String   @unique
  title           String
  metaDescription String
  content         String   @db.Text
  category        String   // "profissao", "setor", "cidade", "guia"
  subcategory     String?  // specific profession, sector, city
  keywords        String[] // target keywords array
  isActive        Boolean  @default(true)
  viewCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  industry        Industry? @relation(fields: [industryId], references: [id])
  industryId      String?
  city            City?     @relation(fields: [cityId], references: [id])
  cityId          String?

  @@index([category, subcategory])
  @@index([isActive])
}

model Industry {
  id          String    @id @default(uuid())
  name        String    @unique // "Engenheiro de Software"
  slug        String    @unique // "engenheiro-software"
  description String    @db.Text
  salary      String?   // "€25.000 - €45.000"
  skills      String[]  // ["JavaScript", "React", "Node.js"]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  seoPages    SeoPage[]

  @@index([isActive])
}

model City {
  id          String    @id @default(uuid())
  name        String    @unique // "Lisboa"
  slug        String    @unique // "lisboa"
  district    String?   // "Lisboa"
  population  Int?
  description String    @db.Text
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  seoPages    SeoPage[]

  @@index([isActive])
}

model SeoTemplate {
  id          String   @id @default(uuid())
  name        String   @unique
  category    String   // "profession", "city", "guide"
  titleTemplate String // "Carta de Apresentação para {profession} | Modelos e Exemplos"
  metaTemplate  String // "Crie a carta perfeita para {profession}. Modelos, exemplos e dicas."
  contentTemplate String @db.Text // HTML template with placeholders
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
